plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
}

repositories {
    jcenter()
    mavenCentral()
}

group = 'org.arkecosystem'
version = '1.0.1'

publishing {
    publishing {
        repositories {
            maven {
                name = "github"
                url = uri("https://maven.pkg.github.com/arkecosystem/java-client")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

dependencies {
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.4.1'
    compile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.4.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

wrapper {
    gradleVersion = '6.2.0'
}

spotless {
    java {
        target fileTree(projectDir) {
            include 'src/main/**/*.java'
            exclude '**/build/**'
        }
        googleJavaFormat('1.1').aosp()
        removeUnusedImports()

    }
}

task formatCode(dependsOn: ['spotlessApply'])

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'standalone'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

build.dependsOn 'spotlessApply'
