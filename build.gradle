plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.diffplug.spotless' version '5.6.1'
}

group = 'org.arkecosystem'
version = '1.2.9'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.8.1'
    implementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.9.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

spotless {
    java {
        target fileTree(projectDir) {
            include 'src/main/**/*.java'
            include 'src/test/**/*.java'
            exclude '**/build/**'
        }
        googleJavaFormat('1.1').aosp()
//        removeUnusedImports()
    }
}

task formatCode(dependsOn: ['spotlessApply'])

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'standalone'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

build.dependsOn 'spotlessApply'

wrapper {
    gradleVersion = '7.2.0'
}

task writeNewPom {
    doLast {
        pom {
            project {
                groupId = project.group
                version = project.version
                artifactId = 'client'

                name = 'java-client'
                description = 'A Simple REST API Client Implementation in Java for the ARK CORE Blockchain Framework.'
                url = 'https://sdk.ark.dev/java/client'
                inceptionYear = '2018'

                licenses {
                    license {
                        name = 'MIT'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Kovač Žan'
                        email = 'zan@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Kristjan Košič'
                        email = 'kristjan@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Brian Faust'
                        email = 'brian@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Joshua Noack'
                        email = 'joshua@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/ArkEcosystem/java-client.git'
                    developerConnection = 'scm:git:ssh://github.com:ArkEcosystem/java-client.git'
                    url = 'https://github.com/ArkEcosystem/java-client'
                }
            }
        }.writeTo("$buildDir/newpom.xml")
    }
}

publishing {

    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}
